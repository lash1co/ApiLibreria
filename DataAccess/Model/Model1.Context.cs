//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LibreriaDBEntities : DbContext
    {
        public LibreriaDBEntities()
            : base("name=LibreriaDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<DetalleVenta> DetalleVenta { get; set; }
        public virtual DbSet<Libro> Libro { get; set; }
        public virtual DbSet<Venta> Venta { get; set; }
    
        public virtual int ActualizarCliente(Nullable<long> idCliente, string cedula, string nombres, string telefono, string direccion)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(long));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarCliente", idClienteParameter, cedulaParameter, nombresParameter, telefonoParameter, direccionParameter);
        }
    
        public virtual int ActualizarDetalleVenta(Nullable<long> id, Nullable<long> venta, Nullable<long> libro, Nullable<int> cantidad)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var ventaParameter = venta.HasValue ?
                new ObjectParameter("Venta", venta) :
                new ObjectParameter("Venta", typeof(long));
    
            var libroParameter = libro.HasValue ?
                new ObjectParameter("Libro", libro) :
                new ObjectParameter("Libro", typeof(long));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarDetalleVenta", idParameter, ventaParameter, libroParameter, cantidadParameter);
        }
    
        public virtual int ActualizarLibro(Nullable<long> idLibro, string nombre, string autor, Nullable<int> cantidad, Nullable<decimal> precio)
        {
            var idLibroParameter = idLibro.HasValue ?
                new ObjectParameter("IdLibro", idLibro) :
                new ObjectParameter("IdLibro", typeof(long));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var autorParameter = autor != null ?
                new ObjectParameter("Autor", autor) :
                new ObjectParameter("Autor", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarLibro", idLibroParameter, nombreParameter, autorParameter, cantidadParameter, precioParameter);
        }
    
        public virtual int ActualizarVenta(Nullable<long> idVenta, string codVenta, Nullable<System.DateTime> fecha, string puntoVenta, Nullable<long> cliente, Nullable<decimal> total)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(long));
    
            var codVentaParameter = codVenta != null ?
                new ObjectParameter("CodVenta", codVenta) :
                new ObjectParameter("CodVenta", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var puntoVentaParameter = puntoVenta != null ?
                new ObjectParameter("PuntoVenta", puntoVenta) :
                new ObjectParameter("PuntoVenta", typeof(string));
    
            var clienteParameter = cliente.HasValue ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(long));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarVenta", idVentaParameter, codVentaParameter, fechaParameter, puntoVentaParameter, clienteParameter, totalParameter);
        }
    
        public virtual int AgregarCliente(string cedula, string nombres, string telefono, string direccion)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarCliente", cedulaParameter, nombresParameter, telefonoParameter, direccionParameter);
        }
    
        public virtual int AgregarDetalleVenta(Nullable<long> venta, Nullable<long> libro, Nullable<int> cantidad)
        {
            var ventaParameter = venta.HasValue ?
                new ObjectParameter("Venta", venta) :
                new ObjectParameter("Venta", typeof(long));
    
            var libroParameter = libro.HasValue ?
                new ObjectParameter("Libro", libro) :
                new ObjectParameter("Libro", typeof(long));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarDetalleVenta", ventaParameter, libroParameter, cantidadParameter);
        }
    
        public virtual int AgregarLibro(string nombre, string autor, Nullable<int> cantidad, Nullable<decimal> precio)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var autorParameter = autor != null ?
                new ObjectParameter("Autor", autor) :
                new ObjectParameter("Autor", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarLibro", nombreParameter, autorParameter, cantidadParameter, precioParameter);
        }
    
        public virtual int AgregarVenta(string codVenta, Nullable<System.DateTime> fecha, string puntoVenta, Nullable<long> cliente, Nullable<decimal> total)
        {
            var codVentaParameter = codVenta != null ?
                new ObjectParameter("CodVenta", codVenta) :
                new ObjectParameter("CodVenta", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var puntoVentaParameter = puntoVenta != null ?
                new ObjectParameter("PuntoVenta", puntoVenta) :
                new ObjectParameter("PuntoVenta", typeof(string));
    
            var clienteParameter = cliente.HasValue ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(long));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarVenta", codVentaParameter, fechaParameter, puntoVentaParameter, clienteParameter, totalParameter);
        }
    
        public virtual int EliminarCliente(Nullable<long> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarCliente", idClienteParameter);
        }
    
        public virtual int EliminarDetalleVenta(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarDetalleVenta", idParameter);
        }
    
        public virtual int EliminarLibro(Nullable<long> idLibro)
        {
            var idLibroParameter = idLibro.HasValue ?
                new ObjectParameter("IdLibro", idLibro) :
                new ObjectParameter("IdLibro", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarLibro", idLibroParameter);
        }
    
        public virtual int EliminarVenta(Nullable<long> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarVenta", idVentaParameter);
        }
    
        public virtual ObjectResult<ObtenerCliente_Result> ObtenerCliente(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerCliente_Result>("ObtenerCliente", idParameter);
        }
    
        public virtual ObjectResult<ObtenerClientes_Result> ObtenerClientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerClientes_Result>("ObtenerClientes");
        }
    
        public virtual ObjectResult<ObtenerDetallesVenta_Result> ObtenerDetallesVenta(Nullable<long> venta)
        {
            var ventaParameter = venta.HasValue ?
                new ObjectParameter("Venta", venta) :
                new ObjectParameter("Venta", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerDetallesVenta_Result>("ObtenerDetallesVenta", ventaParameter);
        }
    
        public virtual ObjectResult<ObtenerDetalleVenta_Result> ObtenerDetalleVenta(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerDetalleVenta_Result>("ObtenerDetalleVenta", idParameter);
        }
    
        public virtual ObjectResult<ObtenerLibro_Result> ObtenerLibro(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerLibro_Result>("ObtenerLibro", idParameter);
        }
    
        public virtual ObjectResult<ObtenerLibros_Result> ObtenerLibros()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerLibros_Result>("ObtenerLibros");
        }
    
        public virtual ObjectResult<ObtenerVenta_Result> ObtenerVenta(Nullable<long> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("IdVenta", idVenta) :
                new ObjectParameter("IdVenta", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerVenta_Result>("ObtenerVenta", idVentaParameter);
        }
    
        public virtual ObjectResult<ObtenerVentas_Result> ObtenerVentas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerVentas_Result>("ObtenerVentas");
        }
    }
}
